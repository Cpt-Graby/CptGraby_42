/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: agonelle <agonelle@student.42lausanne.ch>  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/11/08 14:55:41 by agonelle          #+#    #+#             */
/*   Updated: 2022/11/14 14:08:04 by kino             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"

void	pixel_2img(t_img_dt *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_lth + x * (data->bits_per_pixel / 8));
	*(unsigned int *)dst = color;
}

void	def_4_point(t_vec2 *p1, t_vec2 *p2, t_vec2 *p3, t_vec2 *p4)
{
	p1->x = -50;
	p1->y = -50;
	
	p2->x = -50;
	p2->y = 50;

	p3->x = 50;
	p3->y = -50;

	p4->x = 50;
	p4->y = 50;
}

void	mid_2_screen(t_vec2 *p1, t_vec2 *p1p)
{
	int	midx;
	int	midy;

	midx= WIN_W / 2;
	midy= WIN_H / 2;
	p1p->x = p1->x + midx;
	p1p->y = p1->y + midy;
}

void	draw_cub(t_vec2 p1, t_vec2 p2, t_vec2 p3, t_vec2 p4, t_img_dt *img)
{
	t_vec2	p1p;
	t_vec2	p2p;
	t_vec2	p3p;
	t_vec2	p4p;

	
	mid_2_screen(&p1, &p1p);
	mid_2_screen(&p2, &p2p);
	mid_2_screen(&p3, &p3p);
	mid_2_screen(&p4, &p4p);
	draw_line(p1p, p2p, img);
	draw_line(p1p, p3p, img);
	draw_line(p4p, p3p, img);
	draw_line(p4p, p2p, img);
}

void print_tabl(t_map *map)
{
	int y;
	int i;

	i = 0;
	y = 0;
	while (y < map->line)
	{
		while ( i < map->column)
		{
			ft_printf("%d-", map->tab_line[y].tab_pts[i].x);
			ft_printf("%d-", map->tab_line[y].tab_pts[i].y);
			ft_printf("%d\n", map->tab_line[y].tab_pts[i].z);
			i++;
		}
		y++;
	}
}

int	main_parser(char *path, t_map *map)
{
	int		fd;

	(void) map;
	fd = open(path, O_RDONLY);
	if (fd == -1)
	{
		perror("fdf_file2data.c - main_parser (fd):");
		return (0);
	}
	if (!map_parser(fd, map))
	{
		perror("fdf_file2data.c - map_parser (fd):");
		return (0);
	}
	close (fd);
	return (1);
}
/*
typedef struct s_line {
	int		len;
	t_vec3	*tab_pts;
}	t_line;

typedef struct s_map {
	char	*path;
	int		line;
	int		column;
	int		max_h;
	t_line	*tab_line;
}	t_map;
*/

void free_t_line(t_line *line, int len)
{
	int	i;

	i = 0;
	while (i < len)
	{
		free(line->tab_pts);
		i++;
	}
	//free(line);
}

t_line	*get_next_pts_line(t_map *map, char **tab)
{
	int		i;
	t_vec3	*dt_pts;
	t_line	*new_tab;

	new_tab = malloc(sizeof(*new_tab) * (map->line + 1));
	dt_pts = malloc(sizeof(*dt_pts) * map->column);
	i = 0;
	if (map->line)
	{
		while (i < map->line)
		{
			new_tab[i] = map->tab_line[i];
			i++;
		}
//	free_t_line(map->tab_line, map->column);
	}
	i = 0;
	while ( i < map->column)
		{
			dt_pts[i].x = i;
			dt_pts[i].y = 0;
			dt_pts[i].z = ft_atoi(tab[i]);
			i++;
		}
	new_tab->tab_pts = dt_pts;
	return (new_tab);
}

void	get_first_info_parser(char *line, t_map *map)
{
	char	**tab;
	int		i;

	i = 0;
	tab = ft_split(line, ' ');
	while (tab[i])
		i++;
	map->column = i;
	map->line = 0;
	map->max_h = 0;
	map->tab_line = get_next_pts_line(map, tab);
	map->line++; 
	ft_free_tab((void **)tab, i);
	free(line);
}

int	line_2_tab(char *line, t_map *map)
{
	char	**tab;
	int		i;

	if (!check_line(line))
	{
		perror("fdf_file2data.c - checkline");
		free(line);
		return (0);
	}	
	tab = ft_split(line, ' ');	
	i = 0;
	while (tab[i])
		i++;
	if (i != map-> column)
	{
		ft_free_tab((void **)tab, i);
		perror("fdf_file2data.c - line_2_tab");
		return (0);
	}
	map->tab_line = get_next_pts_line(map, tab); 
	free(line);
	ft_free_tab((void **)tab, i);
	return (0);
}

int	map_parser(int fd, t_map *map)
{
	char	*line;

	line = get_next_line(fd);
	if (!check_line(line))
	{
		perror("fdf_file2data.c - checkline");
		free(line);
		return (0);
	}	
	get_first_info_parser(line, map);
	line = get_next_line(fd);
	while (line)
	{
		line = get_next_line(fd);
		if (!line_2_tab(line, map))
			return (0);
		map->line++;
	}
	return (1);
}

int	fdf_main(char *path)
{
	t_map		map;
	t_vars		vars;
	t_img_dt	img;
	t_vec2		p1;
	t_vec2		p2;
	t_vec2		p3;
	t_vec2		p4;

	if (!check_extension(path))
	{
		errno = EINVAL;
		perror("main.c - fdf_main ");
		exit(-1);
	}
	if (!main_parser(path, &map))
		exit(-1);
	def_4_point(&p1,&p2,&p3,&p4);
	vars.mlx = mlx_init();
	vars.win = mlx_new_window(vars.mlx, WIN_W, WIN_H, "My first window!");
	img.img = mlx_new_image(vars.mlx, WIN_W, WIN_H);
	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_lth,
			&img.endian);
//	draw_line(p1, p2, &img);
	draw_cub(p1, p2, p3, p4, &img);
	mlx_put_image_to_window(vars.mlx, vars.win, img.img, 0, 0);
	
	mlx_hook(vars.win, 17, 0, close_win, &vars);
	mlx_key_hook(vars.win, print_key, &vars);
	mlx_loop(vars.mlx);
	return (0);
}

int main(int argc, char **argv)
{
	int	err;

	if (argc == 1)
	{
		errno = EINVAL;
		perror("main.c - main: too few arguments");
	}
	else if (argc == 2)
		err = fdf_main(argv[1]);
	else
	{
		errno = E2BIG;
		perror("main.c - main:");
	}
	return (err);
}

//	draw_line(p4, p2, &img);
